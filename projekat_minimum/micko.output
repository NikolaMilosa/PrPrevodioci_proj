Grammar

    0 $accept: program $end

    1 program: function_list

    2 function_list: function
    3              | function_list function

    4 $@1: %empty

    5 $@2: %empty

    6 $@3: %empty

    7 function: _TYPE _ID $@1 _LPAREN $@2 parameter $@3 _RPAREN body

    8 parameter: %empty
    9          | _TYPE _ID
   10          | parameter _COMMA _TYPE _ID

   11 $@4: %empty

   12 $@5: %empty

   13 $@6: %empty

   14 body: _LBRACKET $@4 variable_list $@5 statement_list $@6 _RBRACKET

   15 variable_list: %empty
   16              | variable_list variable

   17 $@7: %empty

   18 variable: _TYPE $@7 var_poss _SEMICOLON

   19 var_poss: _ID
   20         | _ID _ASSIGN num_exp
   21         | var_poss _COMMA _ID
   22         | var_poss _COMMA _ID _ASSIGN num_exp

   23 statement_list: %empty
   24               | statement_list statement

   25 statement: compound_statement
   26          | assignment_statement
   27          | if_statement
   28          | return_statement
   29          | select_statement
   30          | inc_statement
   31          | para_statement
   32          | void_func
   33          | check_exp

   34 $@8: %empty

   35 $@9: %empty

   36 check_exp: _CHECK _LSBRAC _ID $@8 _RSBRAC _LBRACKET $@9 whenPart otherwise _RBRACKET

   37 otherwise: %empty

   38 $@10: %empty

   39 otherwise: _OTHERWISE $@10 _ARROW statement

   40 whenPart: when finish_par
   41         | whenPart when finish_par

   42 finish_par: %empty
   43           | _FINISH _SEMICOLON

   44 $@11: %empty

   45 when: _WHEN literal $@11 _ARROW statement

   46 void_func: function_call _SEMICOLON

   47 @12: %empty

   48 $@13: %empty

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN literal _COLON literal _COLON _PASO literal _RPAREN $@13 statement

   50 inc_statement: _ID _INC_OP _SEMICOLON

   51 compound_statement: _LBRACKET statement_list _RBRACKET

   52 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON

   53 num_exp: exp
   54        | num_exp _AROP exp

   55 exp: literal
   56    | _ID
   57    | function_call
   58    | _LPAREN num_exp _RPAREN
   59    | _ID _INC_OP

   60 literal: _INT_NUMBER
   61        | _UINT_NUMBER

   62 $@14: %empty

   63 $@15: %empty

   64 function_call: _ID $@14 _LPAREN $@15 argument _RPAREN

   65 argument: %empty
   66         | num_exp
   67         | argument _COMMA num_exp

   68 if_statement: if_part
   69             | if_part _ELSE statement

   70 @16: %empty

   71 $@17: %empty

   72 if_part: _IF _LPAREN @16 rel_exp $@17 _RPAREN statement

   73 rel_exp: num_exp _RELOP num_exp

   74 return_statement: _RETURN num_exp _SEMICOLON
   75                 | _RETURN _SEMICOLON

   76 select_statement: _SELECT arg_select _FROM _ID _WHERE _LPAREN rel_exp _RPAREN _SEMICOLON

   77 arg_select: _ID
   78           | arg_select _COMMA _ID


Terminals, with rules where they appear

$end (0) 0
error (256)
_TYPE (258) 7 9 10 18
_IF (259) 72
_ELSE (260) 69
_RETURN (261) 74 75
_ID (262) 7 9 10 19 20 21 22 36 49 50 52 56 59 64 76 77 78
_INT_NUMBER (263) 60
_UINT_NUMBER (264) 61
_LPAREN (265) 7 49 58 64 72 76
_RPAREN (266) 7 49 58 64 72 76
_LBRACKET (267) 14 36 51
_RBRACKET (268) 14 36 51
_ASSIGN (269) 20 22 49 52
_SEMICOLON (270) 18 43 46 50 52 74 75 76
_AROP (271) 54
_RELOP (272) 73
_SELECT (273) 76
_FROM (274) 76
_WHERE (275) 76
_COMMA (276) 10 21 22 67 78
_INC_OP (277) 50 59
_PARA (278) 49
_PASO (279) 49
_COLON (280) 49
_CHECK (281) 36
_WHEN (282) 45
_FINISH (283) 43
_LSBRAC (284) 36
_RSBRAC (285) 36
_ARROW (286) 39 45
_OTHERWISE (287) 39
ONLY_IF (288)


Nonterminals, with rules where they appear

$accept (34)
    on left: 0
program (35)
    on left: 1, on right: 0
function_list (36)
    on left: 2 3, on right: 1 3
function (37)
    on left: 7, on right: 2 3
$@1 (38)
    on left: 4, on right: 7
$@2 (39)
    on left: 5, on right: 7
$@3 (40)
    on left: 6, on right: 7
parameter (41)
    on left: 8 9 10, on right: 7 10
body (42)
    on left: 14, on right: 7
$@4 (43)
    on left: 11, on right: 14
$@5 (44)
    on left: 12, on right: 14
$@6 (45)
    on left: 13, on right: 14
variable_list (46)
    on left: 15 16, on right: 14 16
variable (47)
    on left: 18, on right: 16
$@7 (48)
    on left: 17, on right: 18
var_poss (49)
    on left: 19 20 21 22, on right: 18 21 22
statement_list (50)
    on left: 23 24, on right: 14 24 51
statement (51)
    on left: 25 26 27 28 29 30 31 32 33, on right: 24 39 45 49 69 72
check_exp (52)
    on left: 36, on right: 33
$@8 (53)
    on left: 34, on right: 36
$@9 (54)
    on left: 35, on right: 36
otherwise (55)
    on left: 37 39, on right: 36
$@10 (56)
    on left: 38, on right: 39
whenPart (57)
    on left: 40 41, on right: 36 41
finish_par (58)
    on left: 42 43, on right: 40 41
when (59)
    on left: 45, on right: 40 41
$@11 (60)
    on left: 44, on right: 45
void_func (61)
    on left: 46, on right: 32
para_statement (62)
    on left: 49, on right: 31
@12 (63)
    on left: 47, on right: 49
$@13 (64)
    on left: 48, on right: 49
inc_statement (65)
    on left: 50, on right: 30
compound_statement (66)
    on left: 51, on right: 25
assignment_statement (67)
    on left: 52, on right: 26
num_exp (68)
    on left: 53 54, on right: 20 22 52 54 58 66 67 73 74
exp (69)
    on left: 55 56 57 58 59, on right: 53 54
literal (70)
    on left: 60 61, on right: 45 49 55
function_call (71)
    on left: 64, on right: 46 57
$@14 (72)
    on left: 62, on right: 64
$@15 (73)
    on left: 63, on right: 64
argument (74)
    on left: 65 66 67, on right: 64 67
if_statement (75)
    on left: 68 69, on right: 27
if_part (76)
    on left: 72, on right: 68 69
@16 (77)
    on left: 70, on right: 72
$@17 (78)
    on left: 71, on right: 72
rel_exp (79)
    on left: 73, on right: 72 76
return_statement (80)
    on left: 74 75, on right: 28
select_statement (81)
    on left: 76, on right: 29
arg_select (82)
    on left: 77 78, on right: 76 78


State 0

    0 $accept: . program $end

    _TYPE  shift, and go to state 1

    program        go to state 2
    function_list  go to state 3
    function       go to state 4


State 1

    7 function: _TYPE . _ID $@1 _LPAREN $@2 parameter $@3 _RPAREN body

    _ID  shift, and go to state 5


State 2

    0 $accept: program . $end

    $end  shift, and go to state 6


State 3

    1 program: function_list .
    3 function_list: function_list . function

    _TYPE  shift, and go to state 1

    $default  reduce using rule 1 (program)

    function  go to state 7


State 4

    2 function_list: function .

    $default  reduce using rule 2 (function_list)


State 5

    7 function: _TYPE _ID . $@1 _LPAREN $@2 parameter $@3 _RPAREN body

    $default  reduce using rule 4 ($@1)

    $@1  go to state 8


State 6

    0 $accept: program $end .

    $default  accept


State 7

    3 function_list: function_list function .

    $default  reduce using rule 3 (function_list)


State 8

    7 function: _TYPE _ID $@1 . _LPAREN $@2 parameter $@3 _RPAREN body

    _LPAREN  shift, and go to state 9


State 9

    7 function: _TYPE _ID $@1 _LPAREN . $@2 parameter $@3 _RPAREN body

    $default  reduce using rule 5 ($@2)

    $@2  go to state 10


State 10

    7 function: _TYPE _ID $@1 _LPAREN $@2 . parameter $@3 _RPAREN body

    _TYPE  shift, and go to state 11

    $default  reduce using rule 8 (parameter)

    parameter  go to state 12


State 11

    9 parameter: _TYPE . _ID

    _ID  shift, and go to state 13


State 12

    7 function: _TYPE _ID $@1 _LPAREN $@2 parameter . $@3 _RPAREN body
   10 parameter: parameter . _COMMA _TYPE _ID

    _COMMA  shift, and go to state 14

    $default  reduce using rule 6 ($@3)

    $@3  go to state 15


State 13

    9 parameter: _TYPE _ID .

    $default  reduce using rule 9 (parameter)


State 14

   10 parameter: parameter _COMMA . _TYPE _ID

    _TYPE  shift, and go to state 16


State 15

    7 function: _TYPE _ID $@1 _LPAREN $@2 parameter $@3 . _RPAREN body

    _RPAREN  shift, and go to state 17


State 16

   10 parameter: parameter _COMMA _TYPE . _ID

    _ID  shift, and go to state 18


State 17

    7 function: _TYPE _ID $@1 _LPAREN $@2 parameter $@3 _RPAREN . body

    _LBRACKET  shift, and go to state 19

    body  go to state 20


State 18

   10 parameter: parameter _COMMA _TYPE _ID .

    $default  reduce using rule 10 (parameter)


State 19

   14 body: _LBRACKET . $@4 variable_list $@5 statement_list $@6 _RBRACKET

    $default  reduce using rule 11 ($@4)

    $@4  go to state 21


State 20

    7 function: _TYPE _ID $@1 _LPAREN $@2 parameter $@3 _RPAREN body .

    $default  reduce using rule 7 (function)


State 21

   14 body: _LBRACKET $@4 . variable_list $@5 statement_list $@6 _RBRACKET

    $default  reduce using rule 15 (variable_list)

    variable_list  go to state 22


State 22

   14 body: _LBRACKET $@4 variable_list . $@5 statement_list $@6 _RBRACKET
   16 variable_list: variable_list . variable

    _TYPE  shift, and go to state 23

    $default  reduce using rule 12 ($@5)

    $@5       go to state 24
    variable  go to state 25


State 23

   18 variable: _TYPE . $@7 var_poss _SEMICOLON

    $default  reduce using rule 17 ($@7)

    $@7  go to state 26


State 24

   14 body: _LBRACKET $@4 variable_list $@5 . statement_list $@6 _RBRACKET

    $default  reduce using rule 23 (statement_list)

    statement_list  go to state 27


State 25

   16 variable_list: variable_list variable .

    $default  reduce using rule 16 (variable_list)


State 26

   18 variable: _TYPE $@7 . var_poss _SEMICOLON

    _ID  shift, and go to state 28

    var_poss  go to state 29


State 27

   14 body: _LBRACKET $@4 variable_list $@5 statement_list . $@6 _RBRACKET
   24 statement_list: statement_list . statement

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33
    _SELECT    shift, and go to state 34
    _PARA      shift, and go to state 35
    _CHECK     shift, and go to state 36

    $default  reduce using rule 13 ($@6)

    $@6                   go to state 37
    statement             go to state 38
    check_exp             go to state 39
    void_func             go to state 40
    para_statement        go to state 41
    inc_statement         go to state 42
    compound_statement    go to state 43
    assignment_statement  go to state 44
    function_call         go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48
    select_statement      go to state 49


State 28

   19 var_poss: _ID .
   20         | _ID . _ASSIGN num_exp

    _ASSIGN  shift, and go to state 50

    $default  reduce using rule 19 (var_poss)


State 29

   18 variable: _TYPE $@7 var_poss . _SEMICOLON
   21 var_poss: var_poss . _COMMA _ID
   22         | var_poss . _COMMA _ID _ASSIGN num_exp

    _SEMICOLON  shift, and go to state 51
    _COMMA      shift, and go to state 52


State 30

   72 if_part: _IF . _LPAREN @16 rel_exp $@17 _RPAREN statement

    _LPAREN  shift, and go to state 53


State 31

   74 return_statement: _RETURN . num_exp _SEMICOLON
   75                 | _RETURN . _SEMICOLON

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57
    _SEMICOLON    shift, and go to state 58

    num_exp        go to state 59
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 32

   50 inc_statement: _ID . _INC_OP _SEMICOLON
   52 assignment_statement: _ID . _ASSIGN num_exp _SEMICOLON
   64 function_call: _ID . $@14 _LPAREN $@15 argument _RPAREN

    _ASSIGN  shift, and go to state 63
    _INC_OP  shift, and go to state 64

    $default  reduce using rule 62 ($@14)

    $@14  go to state 65


State 33

   51 compound_statement: _LBRACKET . statement_list _RBRACKET

    $default  reduce using rule 23 (statement_list)

    statement_list  go to state 66


State 34

   76 select_statement: _SELECT . arg_select _FROM _ID _WHERE _LPAREN rel_exp _RPAREN _SEMICOLON

    _ID  shift, and go to state 67

    arg_select  go to state 68


State 35

   49 para_statement: _PARA . _LPAREN @12 _ID _ASSIGN literal _COLON literal _COLON _PASO literal _RPAREN $@13 statement

    _LPAREN  shift, and go to state 69


State 36

   36 check_exp: _CHECK . _LSBRAC _ID $@8 _RSBRAC _LBRACKET $@9 whenPart otherwise _RBRACKET

    _LSBRAC  shift, and go to state 70


State 37

   14 body: _LBRACKET $@4 variable_list $@5 statement_list $@6 . _RBRACKET

    _RBRACKET  shift, and go to state 71


State 38

   24 statement_list: statement_list statement .

    $default  reduce using rule 24 (statement_list)


State 39

   33 statement: check_exp .

    $default  reduce using rule 33 (statement)


State 40

   32 statement: void_func .

    $default  reduce using rule 32 (statement)


State 41

   31 statement: para_statement .

    $default  reduce using rule 31 (statement)


State 42

   30 statement: inc_statement .

    $default  reduce using rule 30 (statement)


State 43

   25 statement: compound_statement .

    $default  reduce using rule 25 (statement)


State 44

   26 statement: assignment_statement .

    $default  reduce using rule 26 (statement)


State 45

   46 void_func: function_call . _SEMICOLON

    _SEMICOLON  shift, and go to state 72


State 46

   27 statement: if_statement .

    $default  reduce using rule 27 (statement)


State 47

   68 if_statement: if_part .
   69             | if_part . _ELSE statement

    _ELSE  shift, and go to state 73

    $default  reduce using rule 68 (if_statement)


State 48

   28 statement: return_statement .

    $default  reduce using rule 28 (statement)


State 49

   29 statement: select_statement .

    $default  reduce using rule 29 (statement)


State 50

   20 var_poss: _ID _ASSIGN . num_exp

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57

    num_exp        go to state 74
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 51

   18 variable: _TYPE $@7 var_poss _SEMICOLON .

    $default  reduce using rule 18 (variable)


State 52

   21 var_poss: var_poss _COMMA . _ID
   22         | var_poss _COMMA . _ID _ASSIGN num_exp

    _ID  shift, and go to state 75


State 53

   72 if_part: _IF _LPAREN . @16 rel_exp $@17 _RPAREN statement

    $default  reduce using rule 70 (@16)

    @16  go to state 76


State 54

   56 exp: _ID .
   59    | _ID . _INC_OP
   64 function_call: _ID . $@14 _LPAREN $@15 argument _RPAREN

    _INC_OP  shift, and go to state 77

    _LPAREN   reduce using rule 62 ($@14)
    $default  reduce using rule 56 (exp)

    $@14  go to state 65


State 55

   60 literal: _INT_NUMBER .

    $default  reduce using rule 60 (literal)


State 56

   61 literal: _UINT_NUMBER .

    $default  reduce using rule 61 (literal)


State 57

   58 exp: _LPAREN . num_exp _RPAREN

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57

    num_exp        go to state 78
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 58

   75 return_statement: _RETURN _SEMICOLON .

    $default  reduce using rule 75 (return_statement)


State 59

   54 num_exp: num_exp . _AROP exp
   74 return_statement: _RETURN num_exp . _SEMICOLON

    _SEMICOLON  shift, and go to state 79
    _AROP       shift, and go to state 80


State 60

   53 num_exp: exp .

    $default  reduce using rule 53 (num_exp)


State 61

   55 exp: literal .

    $default  reduce using rule 55 (exp)


State 62

   57 exp: function_call .

    $default  reduce using rule 57 (exp)


State 63

   52 assignment_statement: _ID _ASSIGN . num_exp _SEMICOLON

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57

    num_exp        go to state 81
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 64

   50 inc_statement: _ID _INC_OP . _SEMICOLON

    _SEMICOLON  shift, and go to state 82


State 65

   64 function_call: _ID $@14 . _LPAREN $@15 argument _RPAREN

    _LPAREN  shift, and go to state 83


State 66

   24 statement_list: statement_list . statement
   51 compound_statement: _LBRACKET statement_list . _RBRACKET

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33
    _RBRACKET  shift, and go to state 84
    _SELECT    shift, and go to state 34
    _PARA      shift, and go to state 35
    _CHECK     shift, and go to state 36

    statement             go to state 38
    check_exp             go to state 39
    void_func             go to state 40
    para_statement        go to state 41
    inc_statement         go to state 42
    compound_statement    go to state 43
    assignment_statement  go to state 44
    function_call         go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48
    select_statement      go to state 49


State 67

   77 arg_select: _ID .

    $default  reduce using rule 77 (arg_select)


State 68

   76 select_statement: _SELECT arg_select . _FROM _ID _WHERE _LPAREN rel_exp _RPAREN _SEMICOLON
   78 arg_select: arg_select . _COMMA _ID

    _FROM   shift, and go to state 85
    _COMMA  shift, and go to state 86


State 69

   49 para_statement: _PARA _LPAREN . @12 _ID _ASSIGN literal _COLON literal _COLON _PASO literal _RPAREN $@13 statement

    $default  reduce using rule 47 (@12)

    @12  go to state 87


State 70

   36 check_exp: _CHECK _LSBRAC . _ID $@8 _RSBRAC _LBRACKET $@9 whenPart otherwise _RBRACKET

    _ID  shift, and go to state 88


State 71

   14 body: _LBRACKET $@4 variable_list $@5 statement_list $@6 _RBRACKET .

    $default  reduce using rule 14 (body)


State 72

   46 void_func: function_call _SEMICOLON .

    $default  reduce using rule 46 (void_func)


State 73

   69 if_statement: if_part _ELSE . statement

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33
    _SELECT    shift, and go to state 34
    _PARA      shift, and go to state 35
    _CHECK     shift, and go to state 36

    statement             go to state 89
    check_exp             go to state 39
    void_func             go to state 40
    para_statement        go to state 41
    inc_statement         go to state 42
    compound_statement    go to state 43
    assignment_statement  go to state 44
    function_call         go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48
    select_statement      go to state 49


State 74

   20 var_poss: _ID _ASSIGN num_exp .
   54 num_exp: num_exp . _AROP exp

    _AROP  shift, and go to state 80

    $default  reduce using rule 20 (var_poss)


State 75

   21 var_poss: var_poss _COMMA _ID .
   22         | var_poss _COMMA _ID . _ASSIGN num_exp

    _ASSIGN  shift, and go to state 90

    $default  reduce using rule 21 (var_poss)


State 76

   72 if_part: _IF _LPAREN @16 . rel_exp $@17 _RPAREN statement

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57

    num_exp        go to state 91
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62
    rel_exp        go to state 92


State 77

   59 exp: _ID _INC_OP .

    $default  reduce using rule 59 (exp)


State 78

   54 num_exp: num_exp . _AROP exp
   58 exp: _LPAREN num_exp . _RPAREN

    _RPAREN  shift, and go to state 93
    _AROP    shift, and go to state 80


State 79

   74 return_statement: _RETURN num_exp _SEMICOLON .

    $default  reduce using rule 74 (return_statement)


State 80

   54 num_exp: num_exp _AROP . exp

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57

    exp            go to state 94
    literal        go to state 61
    function_call  go to state 62


State 81

   52 assignment_statement: _ID _ASSIGN num_exp . _SEMICOLON
   54 num_exp: num_exp . _AROP exp

    _SEMICOLON  shift, and go to state 95
    _AROP       shift, and go to state 80


State 82

   50 inc_statement: _ID _INC_OP _SEMICOLON .

    $default  reduce using rule 50 (inc_statement)


State 83

   64 function_call: _ID $@14 _LPAREN . $@15 argument _RPAREN

    $default  reduce using rule 63 ($@15)

    $@15  go to state 96


State 84

   51 compound_statement: _LBRACKET statement_list _RBRACKET .

    $default  reduce using rule 51 (compound_statement)


State 85

   76 select_statement: _SELECT arg_select _FROM . _ID _WHERE _LPAREN rel_exp _RPAREN _SEMICOLON

    _ID  shift, and go to state 97


State 86

   78 arg_select: arg_select _COMMA . _ID

    _ID  shift, and go to state 98


State 87

   49 para_statement: _PARA _LPAREN @12 . _ID _ASSIGN literal _COLON literal _COLON _PASO literal _RPAREN $@13 statement

    _ID  shift, and go to state 99


State 88

   36 check_exp: _CHECK _LSBRAC _ID . $@8 _RSBRAC _LBRACKET $@9 whenPart otherwise _RBRACKET

    $default  reduce using rule 34 ($@8)

    $@8  go to state 100


State 89

   69 if_statement: if_part _ELSE statement .

    $default  reduce using rule 69 (if_statement)


State 90

   22 var_poss: var_poss _COMMA _ID _ASSIGN . num_exp

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57

    num_exp        go to state 101
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 91

   54 num_exp: num_exp . _AROP exp
   73 rel_exp: num_exp . _RELOP num_exp

    _AROP   shift, and go to state 80
    _RELOP  shift, and go to state 102


State 92

   72 if_part: _IF _LPAREN @16 rel_exp . $@17 _RPAREN statement

    $default  reduce using rule 71 ($@17)

    $@17  go to state 103


State 93

   58 exp: _LPAREN num_exp _RPAREN .

    $default  reduce using rule 58 (exp)


State 94

   54 num_exp: num_exp _AROP exp .

    $default  reduce using rule 54 (num_exp)


State 95

   52 assignment_statement: _ID _ASSIGN num_exp _SEMICOLON .

    $default  reduce using rule 52 (assignment_statement)


State 96

   64 function_call: _ID $@14 _LPAREN $@15 . argument _RPAREN

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57

    $default  reduce using rule 65 (argument)

    num_exp        go to state 104
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62
    argument       go to state 105


State 97

   76 select_statement: _SELECT arg_select _FROM _ID . _WHERE _LPAREN rel_exp _RPAREN _SEMICOLON

    _WHERE  shift, and go to state 106


State 98

   78 arg_select: arg_select _COMMA _ID .

    $default  reduce using rule 78 (arg_select)


State 99

   49 para_statement: _PARA _LPAREN @12 _ID . _ASSIGN literal _COLON literal _COLON _PASO literal _RPAREN $@13 statement

    _ASSIGN  shift, and go to state 107


State 100

   36 check_exp: _CHECK _LSBRAC _ID $@8 . _RSBRAC _LBRACKET $@9 whenPart otherwise _RBRACKET

    _RSBRAC  shift, and go to state 108


State 101

   22 var_poss: var_poss _COMMA _ID _ASSIGN num_exp .
   54 num_exp: num_exp . _AROP exp

    _AROP  shift, and go to state 80

    $default  reduce using rule 22 (var_poss)


State 102

   73 rel_exp: num_exp _RELOP . num_exp

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57

    num_exp        go to state 109
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 103

   72 if_part: _IF _LPAREN @16 rel_exp $@17 . _RPAREN statement

    _RPAREN  shift, and go to state 110


State 104

   54 num_exp: num_exp . _AROP exp
   66 argument: num_exp .

    _AROP  shift, and go to state 80

    $default  reduce using rule 66 (argument)


State 105

   64 function_call: _ID $@14 _LPAREN $@15 argument . _RPAREN
   67 argument: argument . _COMMA num_exp

    _RPAREN  shift, and go to state 111
    _COMMA   shift, and go to state 112


State 106

   76 select_statement: _SELECT arg_select _FROM _ID _WHERE . _LPAREN rel_exp _RPAREN _SEMICOLON

    _LPAREN  shift, and go to state 113


State 107

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN . literal _COLON literal _COLON _PASO literal _RPAREN $@13 statement

    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56

    literal  go to state 114


State 108

   36 check_exp: _CHECK _LSBRAC _ID $@8 _RSBRAC . _LBRACKET $@9 whenPart otherwise _RBRACKET

    _LBRACKET  shift, and go to state 115


State 109

   54 num_exp: num_exp . _AROP exp
   73 rel_exp: num_exp _RELOP num_exp .

    _AROP  shift, and go to state 80

    $default  reduce using rule 73 (rel_exp)


State 110

   72 if_part: _IF _LPAREN @16 rel_exp $@17 _RPAREN . statement

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33
    _SELECT    shift, and go to state 34
    _PARA      shift, and go to state 35
    _CHECK     shift, and go to state 36

    statement             go to state 116
    check_exp             go to state 39
    void_func             go to state 40
    para_statement        go to state 41
    inc_statement         go to state 42
    compound_statement    go to state 43
    assignment_statement  go to state 44
    function_call         go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48
    select_statement      go to state 49


State 111

   64 function_call: _ID $@14 _LPAREN $@15 argument _RPAREN .

    $default  reduce using rule 64 (function_call)


State 112

   67 argument: argument _COMMA . num_exp

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57

    num_exp        go to state 117
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62


State 113

   76 select_statement: _SELECT arg_select _FROM _ID _WHERE _LPAREN . rel_exp _RPAREN _SEMICOLON

    _ID           shift, and go to state 54
    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56
    _LPAREN       shift, and go to state 57

    num_exp        go to state 91
    exp            go to state 60
    literal        go to state 61
    function_call  go to state 62
    rel_exp        go to state 118


State 114

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN literal . _COLON literal _COLON _PASO literal _RPAREN $@13 statement

    _COLON  shift, and go to state 119


State 115

   36 check_exp: _CHECK _LSBRAC _ID $@8 _RSBRAC _LBRACKET . $@9 whenPart otherwise _RBRACKET

    $default  reduce using rule 35 ($@9)

    $@9  go to state 120


State 116

   72 if_part: _IF _LPAREN @16 rel_exp $@17 _RPAREN statement .

    $default  reduce using rule 72 (if_part)


State 117

   54 num_exp: num_exp . _AROP exp
   67 argument: argument _COMMA num_exp .

    _AROP  shift, and go to state 80

    $default  reduce using rule 67 (argument)


State 118

   76 select_statement: _SELECT arg_select _FROM _ID _WHERE _LPAREN rel_exp . _RPAREN _SEMICOLON

    _RPAREN  shift, and go to state 121


State 119

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN literal _COLON . literal _COLON _PASO literal _RPAREN $@13 statement

    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56

    literal  go to state 122


State 120

   36 check_exp: _CHECK _LSBRAC _ID $@8 _RSBRAC _LBRACKET $@9 . whenPart otherwise _RBRACKET

    _WHEN  shift, and go to state 123

    whenPart  go to state 124
    when      go to state 125


State 121

   76 select_statement: _SELECT arg_select _FROM _ID _WHERE _LPAREN rel_exp _RPAREN . _SEMICOLON

    _SEMICOLON  shift, and go to state 126


State 122

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN literal _COLON literal . _COLON _PASO literal _RPAREN $@13 statement

    _COLON  shift, and go to state 127


State 123

   45 when: _WHEN . literal $@11 _ARROW statement

    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56

    literal  go to state 128


State 124

   36 check_exp: _CHECK _LSBRAC _ID $@8 _RSBRAC _LBRACKET $@9 whenPart . otherwise _RBRACKET
   41 whenPart: whenPart . when finish_par

    _WHEN       shift, and go to state 123
    _OTHERWISE  shift, and go to state 129

    $default  reduce using rule 37 (otherwise)

    otherwise  go to state 130
    when       go to state 131


State 125

   40 whenPart: when . finish_par

    _FINISH  shift, and go to state 132

    $default  reduce using rule 42 (finish_par)

    finish_par  go to state 133


State 126

   76 select_statement: _SELECT arg_select _FROM _ID _WHERE _LPAREN rel_exp _RPAREN _SEMICOLON .

    $default  reduce using rule 76 (select_statement)


State 127

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN literal _COLON literal _COLON . _PASO literal _RPAREN $@13 statement

    _PASO  shift, and go to state 134


State 128

   45 when: _WHEN literal . $@11 _ARROW statement

    $default  reduce using rule 44 ($@11)

    $@11  go to state 135


State 129

   39 otherwise: _OTHERWISE . $@10 _ARROW statement

    $default  reduce using rule 38 ($@10)

    $@10  go to state 136


State 130

   36 check_exp: _CHECK _LSBRAC _ID $@8 _RSBRAC _LBRACKET $@9 whenPart otherwise . _RBRACKET

    _RBRACKET  shift, and go to state 137


State 131

   41 whenPart: whenPart when . finish_par

    _FINISH  shift, and go to state 132

    $default  reduce using rule 42 (finish_par)

    finish_par  go to state 138


State 132

   43 finish_par: _FINISH . _SEMICOLON

    _SEMICOLON  shift, and go to state 139


State 133

   40 whenPart: when finish_par .

    $default  reduce using rule 40 (whenPart)


State 134

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN literal _COLON literal _COLON _PASO . literal _RPAREN $@13 statement

    _INT_NUMBER   shift, and go to state 55
    _UINT_NUMBER  shift, and go to state 56

    literal  go to state 140


State 135

   45 when: _WHEN literal $@11 . _ARROW statement

    _ARROW  shift, and go to state 141


State 136

   39 otherwise: _OTHERWISE $@10 . _ARROW statement

    _ARROW  shift, and go to state 142


State 137

   36 check_exp: _CHECK _LSBRAC _ID $@8 _RSBRAC _LBRACKET $@9 whenPart otherwise _RBRACKET .

    $default  reduce using rule 36 (check_exp)


State 138

   41 whenPart: whenPart when finish_par .

    $default  reduce using rule 41 (whenPart)


State 139

   43 finish_par: _FINISH _SEMICOLON .

    $default  reduce using rule 43 (finish_par)


State 140

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN literal _COLON literal _COLON _PASO literal . _RPAREN $@13 statement

    _RPAREN  shift, and go to state 143


State 141

   45 when: _WHEN literal $@11 _ARROW . statement

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33
    _SELECT    shift, and go to state 34
    _PARA      shift, and go to state 35
    _CHECK     shift, and go to state 36

    statement             go to state 144
    check_exp             go to state 39
    void_func             go to state 40
    para_statement        go to state 41
    inc_statement         go to state 42
    compound_statement    go to state 43
    assignment_statement  go to state 44
    function_call         go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48
    select_statement      go to state 49


State 142

   39 otherwise: _OTHERWISE $@10 _ARROW . statement

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33
    _SELECT    shift, and go to state 34
    _PARA      shift, and go to state 35
    _CHECK     shift, and go to state 36

    statement             go to state 145
    check_exp             go to state 39
    void_func             go to state 40
    para_statement        go to state 41
    inc_statement         go to state 42
    compound_statement    go to state 43
    assignment_statement  go to state 44
    function_call         go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48
    select_statement      go to state 49


State 143

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN literal _COLON literal _COLON _PASO literal _RPAREN . $@13 statement

    $default  reduce using rule 48 ($@13)

    $@13  go to state 146


State 144

   45 when: _WHEN literal $@11 _ARROW statement .

    $default  reduce using rule 45 (when)


State 145

   39 otherwise: _OTHERWISE $@10 _ARROW statement .

    $default  reduce using rule 39 (otherwise)


State 146

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN literal _COLON literal _COLON _PASO literal _RPAREN $@13 . statement

    _IF        shift, and go to state 30
    _RETURN    shift, and go to state 31
    _ID        shift, and go to state 32
    _LBRACKET  shift, and go to state 33
    _SELECT    shift, and go to state 34
    _PARA      shift, and go to state 35
    _CHECK     shift, and go to state 36

    statement             go to state 147
    check_exp             go to state 39
    void_func             go to state 40
    para_statement        go to state 41
    inc_statement         go to state 42
    compound_statement    go to state 43
    assignment_statement  go to state 44
    function_call         go to state 45
    if_statement          go to state 46
    if_part               go to state 47
    return_statement      go to state 48
    select_statement      go to state 49


State 147

   49 para_statement: _PARA _LPAREN @12 _ID _ASSIGN literal _COLON literal _COLON _PASO literal _RPAREN $@13 statement .

    $default  reduce using rule 49 (para_statement)
